version: "3.9"
services:
  redis:
    container_name: redis_container
    image: jelastic/redis:7.2.1
    ports:
      - "6379:6379"
    volumes:
      - cache:/data

        #db:
        #  image: postgres:latest
        #  volumes:
        #    - db:/var/lib/postrgresql/data/
        #  ports:
        #    - "5432:5432"
        #  environment:
        #    POSTGRES_PASSWORD: mysecretpassword
        #    POSTGRES_DB: example-pg-docker
        #  healthcheck:
        #    test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U postgres"]
        #    interval: 10s
        #    timeout: 5s
        #    retries: 10
        #    start_period: 3s

  postgres:
    container_name: postgres_container
    image: postgres
      #image: jelastic/postgres:15.4 # needs setup see: https://github.com/jelastic-jps/postgres/blob/v2.0.0/addons/auto-cluster.yaml (cmd[..] ...)
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-postgres_db}
      PGDATA: /data/postgres
    volumes:
      - postgres:/var/lib/pgsql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB:-postgres_db} -U ${POSTGRES_USER:-postgres}"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 10s
    ports:
      - "5432:5432"
      - "5051:80"
    networks:
      - postgres
    restart: unless-stopped
  
  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - postgres
    restart: unless-stopped

  app:
    container_name: gunicorn_container
    build:
      context: .
      args:
        INSTALL_DEPENDENCIES: dev
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://app:8000/ || exit 1
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    ports:
      - "${PORT:-80}:8000"
    env_file:
      - .env
    volumes:
      - .:/app:cached
      - type: bind
        source: ${APP_PATH:-./app}
        target: /app

networks:
  postgres:
    driver: bridge

volumes:
  db: {}
  cache: {}
  postgres:
  pgadmin:
